[tox]
envlist = py27,pep8
minversion = 2.0
skipsdist = True

[testenv]
setenv = VIRTUAL_ENV={envdir}
passenv = TRACE_FAILONLY
usedevelop = True
install_command = 
    pip install -U {opts} {packages}
deps = -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt
whitelist_externals = sh
commands =
  #dsvm-functional: {toxinidir}/tools/deploy_rootwrap.sh {toxinidir} {envdir}/etc {envdir}/bin

  # These tests are currently causing problems
  # nosetests -v -s napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_interfaces_ip
  # nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_bgp_neighbors_detail

  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_bgp_config
  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_bgp_neighbors
  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_environment
  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_facts
  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_interfaces
  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_interfaces_counters
  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_lldp_neighbors
  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_lldp_neighbors_detail
  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_arp_table
  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_ntp_peers
  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_ntp_stats
  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_mac_address_table
  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_route_to
  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_snmp_information
  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_probes_config
  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_probes_results
  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_traceroute
  nosetests -v napalm_junos/tests/unit/test_junosdriver.py:TestGetterJunOSDriver.test_get_users

  # This is the preferred method for running unit tests, as pretty_tox.sh (and the scripts behind it) allow
  # for all kinds of cool things like parallel testing, and enhanced output. We should make an effort to
  # get this working. It's definitely better to automate the enumeraion of unit tests
  # sh tools/pretty_tox.sh '{posargs}'
  # there is also secret magic in pretty_tox.sh which lets you run in a fail only
  # mode. To do this define the TRACE_FAILONLY environmental variable.

[tox:jenkins]
sitepackages = True
downloadcache = ~/cache/pip

[testenv:pep8]
basepython=python2.7
deps =
  {[testenv]deps}
commands=
  # If it is easier to add a check via a shell script, consider adding it here
  sh ./tools/misc-sanity-checks.sh
  {toxinidir}/tools/check_unit_test_structure.sh
  flake8
  sh ./tools/coding-checks.sh --pylint '{posargs}'
whitelist_externals =
  sh
  bash

[testenv:debug]
commands = oslo_debug_helper -t napalm_junos/tests {posargs}

[testenv:cover]
commands =
  python setup.py testr --coverage --testr-args='{posargs}'
  coverage report

[testenv:venv]
commands = {posargs}

[testenv:docs]
commands = sphinx-build -W -b html doc/source doc/build

[flake8]
# H102  Apache 2.0 license header not found
ignore = H102
show-source = true
builtins = _
exclude = ./.*,build,dist
